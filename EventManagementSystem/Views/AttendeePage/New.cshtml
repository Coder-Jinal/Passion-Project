@model EventManagementSystem.Models.AttendeeDto

@{
    ViewData["Title"] = "Add New Attendee";
}

<h1 class="page-title">Add New Attendee</h1>

<hr />

<!-- Form container -->
<div class="form-container">
    <form id="attendeeForm" asp-action="Add" onsubmit="return validateForm()">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- First Name -->
        <div class="form-group">
            <label asp-for="FirstName" class="control-label">First Name:</label>
            <input asp-for="FirstName" class="form-control" id="firstName" />
            <span asp-validation-for="FirstName" class="text-danger"></span>

        </div>

        <!-- Last Name -->
        <div class="form-group">
            <label asp-for="LastName" class="control-label">Last Name:</label>
            <input asp-for="LastName" class="form-control" id="lastName" />
            <span asp-validation-for="LastName" class="text-danger"></span>

        </div>

        <!-- Email -->
        <div class="form-group">
            <label asp-for="Email" class="control-label">Email Id:</label>
            <input asp-for="Email" class="form-control" id="email" />
            <span asp-validation-for="Email" class="text-danger"></span>

        </div>

        <!-- Phone -->
        <div class="form-group">
            <label asp-for="Phone" class="control-label">Contact Number:</label>
            <input asp-for="Phone" class="form-control" id="phone" />
            <span asp-validation-for="Phone" class="text-danger"></span>

        </div>

        <!-- Submit Button -->
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-submit" />
            <a class="btn btn-cancel" asp-action="Index">Cancel</a>
        </div>
    </form>
</div>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    function validateForm() {
        let isValid = true;

        // Get input values
        let firstName = document.getElementById("firstName").value.trim();
        let lastName = document.getElementById("lastName").value.trim();
        let email = document.getElementById("email").value.trim();
        let phoneInput = document.querySelector("[name='Phone']"); // Get input element
        let phone = phoneInput.value.trim(); // Get input value

        // Clear previous error messages
        document.getElementById("firstNameError").innerText = "";
        document.getElementById("lastNameError").innerText = "";
        document.getElementById("emailError").innerText = "";
        document.getElementById("phoneError").innerText = "";

        // First Name Validation
        if (firstName === "") {
            // document.getElementById("firstNameError").innerText = "This field cannot be empty.";
            isValid = false;
        } else if (!/^[a-zA-Z]+$/.test(firstName)) {
            document.getElementById("firstNameError").innerText = "Please enter the name correctly.";
            isValid = false;
        }

        // Last Name Validation
        if (lastName === "") {
            // document.getElementById("lastNameError").innerText = "This field cannot be empty.";
            isValid = false;
        } else if (!/^[a-zA-Z]+$/.test(lastName)) {
            document.getElementById("lastNameError").innerText = "Please enter the name correctly.";
            isValid = false;
        }

        // Email Validation
        if (email === "") {
            // document.getElementById("emailError").innerText = "This field cannot be empty.";
            isValid = false;
        } 

        // Phone Number Validation
        if (phone === "") {
            // document.getElementById("phoneError").innerText = "This field cannot be empty.";
            isValid = false;
        } else if (!/^\d+$/.test(phone)) { // Check if the input contains only numbers
            document.getElementById("phoneError").innerText = "This field can only contain numbers.";
            isValid = false;
        }

        return isValid;
    }

</script>

<style>
    /* Global body styling */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
    }

    /* Page title */
    .page-title {
        font-size: 2rem;
        text-align: center;
        margin-top: 20px;
        color: #343a40;
    }

    /* Form container */
    .form-container {
        max-width: 600px;
        margin: 40px auto;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    /* Form group styling */
    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #495057;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border-radius: 4px;
        border: 1px solid #ced4da;
    }

    .form-control:focus {
        border-color: #80bdff;
        outline: none;
    }

    /* Error message styling */
    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
        display: block;
    }

    /* Submit button styling */
    .btn-submit {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

    .btn-submit:hover {
        background-color: #0056b3;
    }


    /* Cancel button styling */
    .btn-cancel {
        padding: 10px 20px;
        background-color: #808080;
        color: white;
        border: 1px solid #808080 border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        margin-left: 8px;
        text-decoration: none;
        display: inline-block;
    }

        .btn-cancel:hover {
            background-color: lightgrey;
            color: black;
            border-color: #808080;
        }

        .btn-cancel:focus {
            outline: none;
        }
</style>
